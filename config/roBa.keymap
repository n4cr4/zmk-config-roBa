#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <3>;
    scroll-layers = <4>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <8 9>;
        };

        single_quote {
            bindings = <&kp SQT>;
            key-positions = <20 21>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <32 33>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <1 2>;
        };

        quit {
            bindings = <&kp LC(F4)>;
            key-positions = <0 9>;
        };
    };

    macros {
        type_hogehuga: type_hogehuga {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp H &kp O &kp G &kp E &kp H &kp O &kp G &kp E &kp LS(H) &kp LS(U) &kp LS(G) &kp LS(A) &kp LS(H) &kp LS(U) &kp LS(G) &kp LS(A)>;
            label = "TYPE_HOGEHUGA";
        };

        duplicate_browser_tab: duplicate_browser_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(D) &kp LA(ENTER)>;
            label = "DUPLICATE_BROWSER_TAB";
        };

        pc_sleep: pc_sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(X)>,
                <&macro_wait_time 180>,
                <&kp U>,
                <&macro_wait_time 180>,
                <&kp S>;

            label = "PC_SLEEP";
        };

        cp_path_open: cp_path_open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&mkp MB1 &mkp MB1 &mkp MB1 &kp LC(C) &kp LG(R)>,
                <&macro_wait_time 180>,
                <&kp LC(V) &kp ENTER>;

            label = "CP_PATH_OPEN";
        };

        cp_line: cp_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp MB1 &mkp MB1 &mkp MB1 &kp LC(C)>;
            label = "CP_LINE";
        };

        cp_word: cp_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp MB1 &mkp MB1 &kp LC(C)>;
            label = "CP_WORD";
        };

        copilot_read_page: copilot_read_page {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(PERIOD)) &kp LANG2 &kp K &kp O &kp N &kp O &kp P &kp E &kp TAB &kp LS(ENTER) &kp LS(ENTER)>;
            label = "COPILOT_READ_PAGE";
        };
    };

    behaviors {
        lt_lang_dance: lt_lang_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "LT_LANG_DANCE";
            #binding-cells = <0>;
            bindings = <&lt 1 LANG1>, <&kp LANG2>;
        };

        cp_dance: cp_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "CP_DANCE";
            #binding-cells = <0>;
            bindings = <&cp_word>, <&cp_line>, <&cp_path_open>;
        };

        teams_sleep_dance: teams_sleep_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "TEAMS_SLEEP_DANCE";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LS(X))>,
                <&kp LC(LS(M))>,
                <&kp LC(LS(O))>,
                <&pc_sleep>;
        };

        copilot_dance: copilot_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "COPILOT_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(DOT))>, <&copilot_read_page>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                 &kp W         &kp E       &kp R           &kp T                                                      &kp Y        &kp U  &lt 4 I    &kp O    &kp P
&mt LCTRL A           &kp S         &kp D       &kp F           &kp G             &kp PRINTSCREEN      &copilot_dance      &kp H        &kp J  &kp K      &kp L    &mt RCTRL SEMI
&mt LC(LEFT_SHIFT) Z  &kp X         &kp C       &kp V           &kp B             &cp_dance            &teams_sleep_dance  &kp N        &kp M  &kp COMMA  &kp DOT  &mt LEFT_SHIFT SLASH
&kp LALT              &kp LEFT_WIN  &caps_word  &lt_lang_dance  &mt LSHIFT SPACE  &lt 5 TAB            &kp BACKSPACE       &lt 2 ENTER                             &mo 6
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F1           &kp F2       &kp F3         &kp F4   &kp F5                       &kp F6          &kp F7          &kp F8              &kp F9               &kp F10
&kp HOME         &kp PAGE_UP  &kp PAGE_DOWN  &kp END  &trans  &trans      &kp F11  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW        &kp RIGHT_ARROW      &kp LC(LS(A))
&kp LC(LS(TAB))  &kp LC(TAB)  &trans         &trans   &trans  &trans      &kp F12  &trans          &trans          &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &duplicate_browser_tab
&trans           &trans       &trans         &trans   &trans  &trans      &kp DEL  &trans                                                                   &trans
            >;
        };

        NUM {
            bindings = <
&kp N1    &kp N2    &kp NUMBER_3  &kp NUMBER_4  &kp N5                         &kp NUMBER_6  &kp N7     &kp N8     &kp N9    &kp N0
&kp EXCL  &kp AT    &kp HASH      &kp DLLR      &kp PRCNT  &trans      &trans  &kp CARET     &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR
&kp BSLH  &kp LBRC  &kp RBRC      &kp UNDER     &kp EQUAL  &trans      &trans  &kp PLUS      &kp MINUS  &kp LBKT   &kp RBKT  &kp PIPE
&trans    &trans    &trans        &trans        &trans     &trans      &trans  &trans                                        &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans              &trans               &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &trans              &mkp MB2             &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                     &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp LSHFT  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                             &trans
            >;
        };

        SYSTEM {
            bindings = <
&trans      &trans  &trans             &trans  &trans                      &trans              &kp C_VOLUME_UP     &trans                  &trans                   &kp LA(LC(DELETE))
&kp C_MUTE  &trans  &kp C_VOLUME_DOWN  &trans  &trans  &trans      &trans  &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)        &kp LG(RIGHT_ARROW)      &trans
&trans      &trans  &trans             &trans  &trans  &trans      &trans  &trans              &kp LG(TAB)         &kp LC(LG(LEFT_ARROW))  &kp LC(LG(RIGHT_ARROW))  &trans
&trans      &trans  &trans             &trans  &trans  &trans      &trans  &trans                                                                                   &trans
            >;
        };

        BOARD_CTRL {
            bindings = <
&bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                           &trans  &trans  &trans           &trans          &trans
&trans          &trans        &trans        &trans        &trans        &trans      &trans       &trans  &trans  &trans           &trans          &trans
&bt BT_CLR      &trans        &trans        &trans        &trans        &trans      &bootloader  &trans  &trans  &msc SCRL_RIGHT  &msc SCRL_LEFT  &trans
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans      &trans       &trans                                           &trans
            >;
        };
    };
};
