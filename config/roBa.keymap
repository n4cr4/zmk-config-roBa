#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <3>;
    scroll-layers = <4>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        Tab {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <8 9>;
        };

        single_quote {
            bindings = <&kp SQT>;
            key-positions = <20 21>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <32 33>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <1 2>;
        };
    };

    macros {
        type_hogehuga: type_hogehuga {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp H &kp O &kp G &kp E &kp H &kp O &kp G &kp E &kp LS(H) &kp LS(U) &kp LS(G) &kp LS(A) &kp LS(H) &kp LS(U) &kp LS(G) &kp LS(A)>;
            label = "TYPE_HOGEHUGA";
        };

        duplicate_browser_tab: duplicate_browser_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(ENTER)>;
            label = "DUPLICATE_BROWSER_TAB";
        };

        pc_sleep: pc_sleep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(X)>,
                <&macro_wait_time 150>,
                <&kp U>,
                <&macro_wait_time 150>,
                <&kp S>;

            label = "PC_SLEEP";
        };
    };

    behaviors {
        lt_lang: lt_lang {
            compatible = "zmk,behavior-tap-dance";
            label = "LT_LANG";
            #binding-cells = <0>;
            bindings = <&lt 1 INT_HENKAN>, <&kp INT_MUHENKAN>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W         &kp E         &kp R        &kp T                                                    &kp Y        &kp U  &lt 4 I    &kp O    &kp P
&mt LCTRL A  &kp S         &kp D         &kp F        &kp G             &kp PRINTSCREEN       &kp LC(LS(DOT))  &kp H        &kp J  &kp K      &kp L    &mt RCTRL SEMI
&kp Z        &kp X         &kp C         &kp V        &kp B             &type_hogehuga        &pc_sleep        &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&caps_word   &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 LANG1  &mt LSHIFT SPACE  &lt 5 LANGUAGE_2      &kp BACKSPACE    &lt 2 ENTER                             &mo 6
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F1  &kp F2  &kp F3     &kp F4     &kp F5                                         &kp F6          &kp F7          &kp F8              &kp F9               &kp F10
&trans  &trans  &trans     &trans     &trans          &trans                &kp F11  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW        &kp RIGHT_ARROW      &kp LC(LS(A))
&trans  &trans  &kp LANG1  &kp LANG2  &kp INT_HENKAN  &kp INT_MUHENKAN      &kp F12  &trans          &trans          &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &trans
&trans  &trans  &trans     &trans     &trans          &trans                &kp DEL  &trans                                                                   &trans
            >;
        };

        NUM {
            bindings = <
&kp N1    &kp N2    &kp NUMBER_3  &kp NUMBER_4  &kp N5                         &kp NUMBER_6  &kp N7     &kp N8     &kp N9    &kp N0
&kp EXCL  &kp AT    &kp HASH      &kp DLLR      &kp PRCNT  &trans      &trans  &kp CARET     &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR
&kp BSLH  &kp LBRC  &kp RBRC      &kp UNDER     &kp EQUAL  &trans      &trans  &kp PLUS      &kp MINUS  &kp LBKT   &kp RBKT  &kp PIPE
&trans    &trans    &trans        &trans        &trans     &trans      &trans  &trans                                        &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans              &trans               &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3            &mkp MB2             &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                     &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &kp LSHFT  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                             &trans
            >;
        };

        SYSTEM {
            bindings = <
&trans      &trans  &trans             &trans  &trans                      &trans              &kp K_VOLUME_UP     &trans                  &trans                   &trans
&kp K_MUTE  &trans  &kp K_VOLUME_DOWN  &trans  &trans  &trans      &trans  &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(UP_ARROW)        &kp LG(RIGHT_ARROW)      &trans
&trans      &trans  &trans             &trans  &trans  &trans      &trans  &trans              &kp LC(LG(TAB))     &kp LC(LG(LEFT_ARROW))  &kp LC(LG(RIGHT_ARROW))  &trans
&trans      &trans  &trans             &trans  &trans  &trans      &trans  &trans                                                                                   &trans
            >;
        };

        BOARD_CTRL {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
